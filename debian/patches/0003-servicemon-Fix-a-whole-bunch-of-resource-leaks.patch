From aeddbbf3ee9228c175cf2cfe5bef80f30067b12e Mon Sep 17 00:00:00 2001
From: Sigmund Augdal <sigmund.augdal@uninett.no>
Date: Fri, 22 Feb 2019 13:48:34 +0100
Subject: [PATCH 3/4] (servicemon) Fix a whole bunch of resource leaks

This makes use of contextlib.closing or try: finally: to make sure
connections that are opened get closed
---
 python/nav/statemon/checker/FtpChecker.py    | 35 +++++++--------
 python/nav/statemon/checker/HttpChecker.py   | 45 ++++++++++----------
 python/nav/statemon/checker/ImapChecker.py   | 32 +++++++-------
 python/nav/statemon/checker/ImapsChecker.py  | 35 +++++++--------
 python/nav/statemon/checker/MysqlChecker.py  |  4 +-
 python/nav/statemon/checker/OracleChecker.py |  3 +-
 python/nav/statemon/checker/Pop3Checker.py   | 30 +++++++------
 python/nav/statemon/checker/SshChecker.py    | 11 ++---
 8 files changed, 102 insertions(+), 93 deletions(-)

diff --git a/python/nav/statemon/checker/FtpChecker.py b/python/nav/statemon/checker/FtpChecker.py
index 9041b0e4e..7150eaad2 100644
--- a/python/nav/statemon/checker/FtpChecker.py
+++ b/python/nav/statemon/checker/FtpChecker.py
@@ -14,6 +14,7 @@
 # License along with NAV. If not, see <http://www.gnu.org/licenses/>.
 #
 """FTP Service Checker"""
+import contextlib
 import socket
 import ftplib
 
@@ -35,26 +36,26 @@ class FtpChecker(AbstractChecker):
         AbstractChecker.__init__(self, service, port=0, **kwargs)
 
     def execute(self):
-        session = FTP(self.timeout)
-        ip, port = self.get_address()
-        output = session.connect(ip, port or 21)
+        with contextlib.closing(FTP(self.timeout)) as session:
+            ip, port = self.get_address()
+            output = session.connect(ip, port or 21)
 
-        # Get server version from the banner.
-        version = ''
-        for line in session.welcome.split('\n'):
-            if line.startswith('220 '):
-                version = line[4:].strip()
-        self.version = version
+            # Get server version from the banner.
+            version = ''
+            for line in session.welcome.split('\n'):
+                if line.startswith('220 '):
+                    version = line[4:].strip()
+            self.version = version
 
-        username = self.args.get('username', '')
-        password = self.args.get('password', '')
-        path = self.args.get('path', '')
-        output = session.login(username, password, path)
+            username = self.args.get('username', '')
+            password = self.args.get('password', '')
+            path = self.args.get('path', '')
+            output = session.login(username, password, path)
 
-        if output[:3] == '230':
-            return Event.UP, 'code 230'
-        else:
-            return Event.DOWN, output.split('\n')[0]
+            if output[:3] == '230':
+                return Event.UP, 'code 230'
+            else:
+                return Event.DOWN, output.split('\n')[0]
 
 
 # pylint: disable=R0913,W0221,R0904
diff --git a/python/nav/statemon/checker/HttpChecker.py b/python/nav/statemon/checker/HttpChecker.py
index e2527db18..780a4e37e 100644
--- a/python/nav/statemon/checker/HttpChecker.py
+++ b/python/nav/statemon/checker/HttpChecker.py
@@ -15,6 +15,7 @@
 #
 """HTTP Service Checker"""
 from nav import buildconf
+import contextlib
 
 from nav.statemon.event import Event
 from nav.statemon.abstractchecker import AbstractChecker
@@ -63,28 +64,28 @@ class HttpChecker(AbstractChecker):
             url = "/"
         _protocol, vhost, path, query, _fragment = urlsplit(url)
 
-        i = self.connect(ip, port or self.PORT)
+        with contextlib.closing(self.connect(ip, port or self.PORT)) as i:
 
-        if vhost:
-            i.host = vhost
+            if vhost:
+                i.host = vhost
 
-        if '?' in url:
-            path = path + '?' + query
-        i.putrequest('GET', path)
-        i.putheader('User-Agent',
-                    'NAV/servicemon; version %s' % buildconf.VERSION)
-        if username:
-            auth = "%s:%s" % (username, password)
-            i.putheader("Authorization", "Basic %s" % auth.encode("base64"))
-        i.endheaders()
-        response = i.getresponse()
-        if 200 <= response.status < 400 or (response.status == 401 and not username):
-            status = Event.UP
-            version = response.getheader('SERVER')
-            self.version = version
-            info = 'OK (%s) %s' % (str(response.status), version)
-        else:
-            status = Event.DOWN
-            info = 'ERROR (%s) %s' % (str(response.status), url)
+            if '?' in url:
+                path = path + '?' + query
+            i.putrequest('GET', path)
+            i.putheader('User-Agent',
+                        'NAV/servicemon; version %s' % buildconf.VERSION)
+            if username:
+                auth = "%s:%s" % (username, password)
+                i.putheader("Authorization", "Basic %s" % auth.encode("base64"))
+            i.endheaders()
+            response = i.getresponse()
+            if 200 <= response.status < 400 or (response.status == 401 and not username):
+                status = Event.UP
+                version = response.getheader('SERVER')
+                self.version = version
+                info = 'OK (%s) %s' % (str(response.status), version)
+            else:
+                status = Event.DOWN
+                info = 'ERROR (%s) %s' % (str(response.status), url)
 
-        return status, info
+            return status, info
diff --git a/python/nav/statemon/checker/ImapChecker.py b/python/nav/statemon/checker/ImapChecker.py
index 601e17438..fe5d3b6e7 100644
--- a/python/nav/statemon/checker/ImapChecker.py
+++ b/python/nav/statemon/checker/ImapChecker.py
@@ -15,6 +15,7 @@
 #
 """IMAP service checker"""
 
+import contextlib
 import socket
 import imaplib
 
@@ -60,19 +61,20 @@ class ImapChecker(AbstractChecker):
         user = self.args.get("username", "")
         ip, port = self.get_address()
         passwd = self.args.get("password", "")
-        session = IMAPConnection(self.timeout, ip, port)
-        ver = session.welcome
-        if user:
-            session.login(user, passwd)
-            session.logout()
-        version = ''
-        ver = ver.split(' ')
-        if len(ver) >= 2:
-            for i in ver[2:]:
-                if i != "at":
-                    version += "%s " % i
-                else:
-                    break
-        self.version = version
+        with contextlib.closing(IMAPConnection(self.timeout,
+                                               ip, port)) as session:
+            ver = session.welcome
+            if user:
+                session.login(user, passwd)
+                session.logout()
+            version = ''
+            ver = ver.split(' ')
+            if len(ver) >= 2:
+                for i in ver[2:]:
+                    if i != "at":
+                        version += "%s " % i
+                    else:
+                        break
+            self.version = version
 
-        return Event.UP, version
+            return Event.UP, version
diff --git a/python/nav/statemon/checker/ImapsChecker.py b/python/nav/statemon/checker/ImapsChecker.py
index 1c14ca32e..0e00a751c 100644
--- a/python/nav/statemon/checker/ImapsChecker.py
+++ b/python/nav/statemon/checker/ImapsChecker.py
@@ -14,7 +14,7 @@
 # License along with NAV. If not, see <http://www.gnu.org/licenses/>.
 #
 """IMAP over SSL service checker"""
-
+import contextlib
 import socket
 import imaplib
 
@@ -42,22 +42,23 @@ class ImapsChecker(AbstractChecker):
         user = self.args.get("username", "")
         ip, port = self.get_address()
         passwd = self.args.get("password", "")
-        session = IMAPSConnection(self.timeout, ip, port)
-        ver = session.welcome
-        if user:
-            session.login(user, passwd)
-            session.logout()
-        version = ''
-        ver = ver.split(' ')
-        if len(ver) >= 2:
-            for i in ver[2:]:
-                if i != "at":
-                    version += "%s " % i
-                else:
-                    break
-        self.version = version
-
-        return Event.UP, version
+        with contextlib.closing(IMAPSConnection(self.timeout,
+                                                ip, port)) as session:
+            ver = session.welcome
+            if user:
+                session.login(user, passwd)
+                session.logout()
+            version = ''
+            ver = ver.split(' ')
+            if len(ver) >= 2:
+                for i in ver[2:]:
+                    if i != "at":
+                        version += "%s " % i
+                    else:
+                        break
+            self.version = version
+
+            return Event.UP, version
 
 
 # pylint: disable=R0904
diff --git a/python/nav/statemon/checker/MysqlChecker.py b/python/nav/statemon/checker/MysqlChecker.py
index 2bdf411dd..a69dab961 100644
--- a/python/nav/statemon/checker/MysqlChecker.py
+++ b/python/nav/statemon/checker/MysqlChecker.py
@@ -52,12 +52,12 @@ class MysqlChecker(AbstractChecker):
             except MysqlError as err:
                 pass  # Ignore login error
 
-            conn.close()
-
             return Event.UP, 'OK'
 
         except MysqlError as err:
             return Event.DOWN, str(err)
+        finally:
+            conn.close()
 
 
 class MysqlConnection(object):
diff --git a/python/nav/statemon/checker/OracleChecker.py b/python/nav/statemon/checker/OracleChecker.py
index be43c985b..1202a8475 100644
--- a/python/nav/statemon/checker/OracleChecker.py
+++ b/python/nav/statemon/checker/OracleChecker.py
@@ -87,8 +87,9 @@ class OracleChecker(AbstractChecker):
                 from sys.v_$instance""")
             row = cursor.fetchone()
             version = row[0]
-            connection.close()
             # pylint: disable=W0703
         except Exception as err:
             return Event.DOWN, str(err)
+        finally:
+            connection.close()
         return Event.UP, "Oracle " + version
diff --git a/python/nav/statemon/checker/Pop3Checker.py b/python/nav/statemon/checker/Pop3Checker.py
index 89aebbc83..a17138dba 100644
--- a/python/nav/statemon/checker/Pop3Checker.py
+++ b/python/nav/statemon/checker/Pop3Checker.py
@@ -42,21 +42,23 @@ class Pop3Checker(AbstractChecker):
         passwd = self.args.get("password", "")
         ip, port = self.get_address()
         conn = PopConnection(self.timeout, ip, port)
-        ver = conn.getwelcome()
-        if user:
-            conn.user(user)
-            conn.pass_(passwd)
-            len(conn.list()[1])
+        try:
+            ver = conn.getwelcome()
+            if user:
+                conn.user(user)
+                conn.pass_(passwd)
+                len(conn.list()[1])
+            version = ''
+            ver = ver.split(' ')
+            if len(ver) >= 1:
+                for i in ver[1:]:
+                    if i != "server":
+                        version += "%s " % i
+                    else:
+                        break
+            self.version = version
+        finally:
             conn.quit()
-        version = ''
-        ver = ver.split(' ')
-        if len(ver) >= 1:
-            for i in ver[1:]:
-                if i != "server":
-                    version += "%s " % i
-                else:
-                    break
-        self.version = version
 
         return Event.UP, version
 
diff --git a/python/nav/statemon/checker/SshChecker.py b/python/nav/statemon/checker/SshChecker.py
index ab052a43b..97bda6af2 100644
--- a/python/nav/statemon/checker/SshChecker.py
+++ b/python/nav/statemon/checker/SshChecker.py
@@ -36,11 +36,11 @@ class SshChecker(AbstractChecker):
 
     def execute(self):
         (hostname, port) = self.get_address()
-        sock = socket.create_connection((hostname, port),
-                                        self.timeout)
-        stream = sock.makefile('r+')
-        version = stream.readline().strip()
         try:
+            sock = socket.create_connection((hostname, port),
+                                            self.timeout)
+            stream = sock.makefile('r+')
+            version = stream.readline().strip()
             protocol, major = version.split('-')[:2]
             stream.write("%s-%s-%s" % (protocol, major, "NAV_Servicemon"))
             stream.flush()
@@ -48,6 +48,7 @@ class SshChecker(AbstractChecker):
             return (Event.DOWN,
                     "Failed to send version reply to %s: %s" % (
                         self.get_address(), str(err)))
-        sock.close()
+        finally:
+            sock.close()
         self.version = version
         return Event.UP, version
-- 
2.17.1

